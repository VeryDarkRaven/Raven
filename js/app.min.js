/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/compTs/appTs.js":
/*!********************************!*\
  !*** ./src/js/compTs/appTs.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global-variables-and-types.js */ "./src/js/compTs/global-variables-and-types.js");
/* harmony import */ var _modules_preloader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/preloader.js */ "./src/js/compTs/modules/preloader.js");
/* harmony import */ var _modules_spawn_animations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/spawn-animations.js */ "./src/js/compTs/modules/spawn-animations.js");
/* harmony import */ var _modules_blocks_window_maxheight_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/blocks-window-maxheight.js */ "./src/js/compTs/modules/blocks-window-maxheight.js");
/* harmony import */ var _modules_disable_page_scaling_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/disable-page-scaling.js */ "./src/js/compTs/modules/disable-page-scaling.js");
/* harmony import */ var _screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./screen-control-arrows.js */ "./src/js/compTs/screen-control-arrows.js");
/* harmony import */ var _resize_toolbar_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resize-toolbar.js */ "./src/js/compTs/resize-toolbar.js");
/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./map.js */ "./src/js/compTs/map.js");










/***/ }),

/***/ "./src/js/compTs/global-variables-and-types.js":
/*!*****************************************************!*\
  !*** ./src/js/compTs/global-variables-and-types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RGBA_CUBE_COLOR": () => (/* binding */ RGBA_CUBE_COLOR),
/* harmony export */   "degreesToRadians": () => (/* binding */ degreesToRadians),
/* harmony export */   "easeInOut": () => (/* binding */ easeInOut),
/* harmony export */   "radiansToDegrees": () => (/* binding */ radiansToDegrees)
/* harmony export */ });
// const RGBA_CUBE_COLOR: string = "0.76, 0.76, 0.76, 1.0";
const RGBA_CUBE_COLOR = "0.40, 0.40, 0.40, 1.0";
function degreesToRadians(degress) {
    return degress * (Math.PI / 180);
}
function radiansToDegrees(redians) {
    return redians * (180 / Math.PI);
}
function easeInOut(t) {
    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
}



/***/ }),

/***/ "./src/js/compTs/map.js":
/*!******************************!*\
  !*** ./src/js/compTs/map.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./screen-control-arrows.js */ "./src/js/compTs/screen-control-arrows.js");

function startMapScript() {
    const map = document.querySelector(".map");
    const itemsContainer = map.querySelector(".map__items-container");
    const blocksPageObj = (0,_screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_0__.createBlockPageObj)();
    const item = createItem();
    addItems();
    trackingChangesBlocksClasses();
    trackingChangesItemsClasses();
    window.addEventListener("resize", () => {
        positioningItems(itemsContainer.children[0]);
        positioningContainer(itemsContainer.children[0]);
    });
    function createItem() {
        const resultItem = document.createElement("div");
        resultItem.classList.add("item");
        return resultItem;
    }
    function addItems() {
        const itemsQuantity = returnItemsQuantity(blocksPageObj.positionArr);
        for (let i = 0; i < itemsQuantity; i++) {
            itemsContainer.appendChild(item.cloneNode(true));
        }
    }
    function returnItemsQuantity(positionArr) {
        let quantity = 0;
        positionArr.forEach((row) => {
            for (let num of row) {
                if (num > 0) {
                    quantity++;
                }
            }
        });
        return quantity;
    }
    function positioningItems(itemActive) {
        const itemWidth = itemActive.offsetWidth;
        const itemHeight = itemActive.offsetWidth;
        const items = itemsContainer.querySelectorAll(".item");
        const gap = 10;
        let positionX = 0;
        let positionY = 0;
        let itemNum = 0;
        for (let i = 0; i < blocksPageObj.positionArr.length; i++) {
            for (let y = 0; y < blocksPageObj.positionArr[i].length; y++) {
                if (blocksPageObj.positionArr[i][y] > 0) {
                    items[itemNum].style.top = `${positionY}px`;
                    items[itemNum].style.left = `${positionX}px`;
                    positionX += itemWidth;
                    itemNum++;
                }
                else if (blocksPageObj.positionArr[i][y] <= 0) {
                    positionX += itemWidth;
                }
                if (checkNecessityGap(itemNum).right) {
                    positionX += gap;
                }
            }
            positionX = 0;
            positionY += itemHeight;
            if (checkNecessityGap(itemNum).bottom) {
                positionY += gap;
            }
        }
    }
    function checkNecessityGap(itemNum) {
        const indexRow = blocksPageObj.positionArr.findIndex((itemsArr) => itemsArr.indexOf(itemNum) !== -1);
        const indexCol = blocksPageObj.positionArr[indexRow].indexOf(itemNum);
        return {
            top: indexRow - 1 !== undefined ? true : false,
            right: indexCol + 1 !== undefined ? true : false,
            bottom: indexRow + 1 !== undefined ? true : false,
            left: indexCol - 1 !== undefined ? true : false,
        };
    }
    function positioningContainer(itemActive) {
        const mapWidth = map.offsetWidth;
        const mapHeight = map.offsetHeight;
        const itemWidth = itemActive.offsetWidth;
        const itemHeight = itemActive.offsetWidth;
        const itemTop = parseInt(itemActive.style.top);
        const itemLeft = parseInt(itemActive.style.left);
        itemsContainer.style.top = `${(mapHeight / 2) - (itemHeight / 2) - itemTop}px`;
        itemsContainer.style.left = `${(mapWidth / 2) - (itemWidth / 2) - itemLeft}px`;
    }
    function trackingChangesItemsClasses() {
        const items = itemsContainer.querySelectorAll(".item");
        const mutationObserver = new MutationObserver((mutationList) => {
            mutationList.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    const target = mutation.target;
                    if (target.classList.contains('_active')) {
                        positioningContainer(target);
                        positioningItems(target);
                    }
                }
            });
        });
        for (let item of items) {
            mutationObserver.observe(item, { attributes: true });
        }
    }
    function trackingChangesBlocksClasses() {
        const wrapper = document.querySelector(".wrapper");
        const blocks = wrapper.querySelectorAll(".wrapper__child");
        const mutationObserver = new MutationObserver((mutationList) => {
            mutationList.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    const target = mutation.target;
                    if (target.classList.contains('_anim_active')) {
                        switchingClassesItems();
                    }
                }
            });
        });
        for (let block of blocks) {
            mutationObserver.observe(block, { attributes: true });
        }
    }
    function switchingClassesItems() {
        const items = itemsContainer.querySelectorAll(".item");
        const currectBlockPosition = (0,_screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_0__.returnCurrectBlockPosition)(blocksPageObj);
        const numBlock = blocksPageObj.positionArr[currectBlockPosition[0]][currectBlockPosition[1]];
        for (let item of items) {
            if (item === items[numBlock - 1]) {
                item.classList.add("_active");
            }
            else {
                item.classList.remove("_active");
            }
        }
    }
}
startMapScript();


/***/ }),

/***/ "./src/js/compTs/modules/blocks-window-maxheight.js":
/*!**********************************************************!*\
  !*** ./src/js/compTs/modules/blocks-window-maxheight.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function recordMaxBlockHeight(...blocks) {
    blocks.forEach((item) => {
        if (!Array.isArray(item) && !(item instanceof NodeList)) {
            item.style.maxHeight = `${window.innerHeight}px`;
        }
        else {
            item.forEach((elem) => elem.style.maxHeight = `${window.innerHeight}px`);
        }
    });
}
function startRecordMaxBlockHeight() {
    const blocks = document.querySelectorAll("[data-window-max-height]");
    recordMaxBlockHeight(blocks);
}
document.addEventListener("DOMContentLoaded", startRecordMaxBlockHeight);
window.addEventListener("resize", startRecordMaxBlockHeight);


/***/ }),

/***/ "./src/js/compTs/modules/disable-page-scaling.js":
/*!*******************************************************!*\
  !*** ./src/js/compTs/modules/disable-page-scaling.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function preventZoomGestureStart() {
    const fullChildrenContainers = document.querySelectorAll("[data-full-scaling-none-container]");
    const containers = document.querySelectorAll("[data-scaling-none-container]");
    const blocks = document.querySelectorAll("[data-scaling-none]");
    const allScalingBlocksArr = [];
    fullChildrenContainers.forEach((container) => {
        const childs = container.querySelectorAll("*");
        if (childs.length > 0) {
            childs.forEach((child) => {
                if (!child.hasAttribute("data-scaling")) {
                    allScalingBlocksArr.push(child);
                }
            });
        }
        allScalingBlocksArr.push(container);
    });
    containers.forEach((container) => {
        const childs = Array.from(container.children);
        childs.forEach((child) => {
            if (!child.hasAttribute("data-scaling")) {
                allScalingBlocksArr.push(child);
            }
        });
        allScalingBlocksArr.push(container);
    });
    blocks.forEach((child) => {
        allScalingBlocksArr.push(child);
    });
    preventZoomGesture(allScalingBlocksArr);
}
function preventZoomGesture(...blocks) {
    blocks.forEach((item) => {
        if (!Array.isArray(item) && !(item instanceof NodeList)) {
            addEvent(item);
        }
        else {
            item.forEach((elem) => {
                addEvent(elem);
            });
        }
    });
    function addEvent(item) {
        item.addEventListener("touchmove", (e) => {
            if (e.touches.length > 1) {
                e.preventDefault();
            }
        });
    }
}
preventZoomGestureStart();


/***/ }),

/***/ "./src/js/compTs/modules/preloader.js":
/*!********************************************!*\
  !*** ./src/js/compTs/modules/preloader.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function preloader() {
    const preloaderScreen = document.querySelector("[data-prldr-screen]");
    const preloaderContainer = preloaderScreen.querySelector(".preloader__container");
    const percents = preloaderContainer.querySelector("[data-prldr-percent]");
    const mediaFiles = document.querySelectorAll("img, svg");
    const mediaItems = preloaderScreen.hasAttribute("data-prldr-wh") ? windowHeightMedia(mediaFiles) : mediaFiles;
    let i = 0;
    if (mediaItems.length > 0) {
        mediaItems.forEach((item) => {
            if (item.offsetParent === null) {
                mediaLoading();
            }
            else {
                item.complete ? mediaLoading() : item.onload = () => mediaLoading();
            }
        });
    }
    else {
        mediaLoading(true);
    }
    function mediaLoading(hidden = false) {
        if (i < mediaItems.length) {
            i++;
        }
        if (percents) {
            entryPercent(i);
        }
        if (i === mediaItems.length || hidden === true) {
            document.body.classList.remove("_lock");
            preloaderScreen.classList.add("_hide");
        }
    }
    function windowHeightMedia(list) {
        let windowHeight = document.documentElement.clientHeight;
        const mediaInScreenArr = Array.from(list).filter((item) => {
            let itemBoundingRect = item.getBoundingClientRect();
            if (itemBoundingRect.top >= window.screenY &&
                itemBoundingRect.top <= window.screenY + windowHeight ||
                itemBoundingRect.bottom >= window.screenY &&
                    itemBoundingRect.bottom <= window.screenY + windowHeight) {
                return true;
            }
            else {
                return false;
            }
        });
        return mediaInScreenArr;
    }
    function entryPercent(num = mediaItems.length) {
        const calcPercent = (num * 100) / mediaItems.length;
        num === mediaItems.length ? percents.innerHTML = "100" : percents.innerHTML = `${calcPercent.toFixed(1)}`;
    }
}
window.addEventListener("DOMContentLoaded", preloader);


/***/ }),

/***/ "./src/js/compTs/modules/spawn-animations.js":
/*!***************************************************!*\
  !*** ./src/js/compTs/modules/spawn-animations.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function spawnAnim() {
    const animItems = document.querySelectorAll("[data-spawn-anim]");
    if (animItems.length > 0) {
        animItems.forEach((item) => {
            const itemHeight = item.offsetHeight;
            const itemOffset = item.getBoundingClientRect().top + window.scrollY;
            const animStart = item.hasAttribute("data-spawn-anim-start") ? +item.dataset.spawnAnimStart : 4;
            let animItemPoint = 0;
            if (itemHeight > window.innerHeight || itemHeight === undefined) {
                animItemPoint = window.innerHeight - window.innerHeight / animStart;
            }
            else {
                animItemPoint = window.innerHeight - itemHeight / animStart;
            }
            window.addEventListener("scroll", animOnScroll);
            animOnScroll();
            function animOnScroll() {
                if (scrollY > itemOffset - animItemPoint && scrollY < itemOffset + itemHeight ||
                    scrollY > itemOffset - animItemPoint && scrollY < itemOffset + window.innerHeight / animStart) {
                    item.classList.add("_anim_active");
                }
                else {
                    if (item.hasAttribute("data-spawn-anim-h")) {
                        item.classList.remove("_anim_active");
                    }
                }
            }
        });
    }
}
function checkForPreloader() {
    const preloader = document.querySelector("[data-prldr-screen]");
    if (preloader && !preloader.classList.contains("_hide") && !preloader.classList.contains("_cube-end-anim")) {
        let checkForPreloader = setInterval(() => {
            if (preloader.classList.contains("_hide") && preloader.classList.contains("_cube-end-anim")) {
                spawnAnim();
                clearInterval(checkForPreloader);
            }
        }, 300);
    }
    else {
        spawnAnim();
    }
}
document.addEventListener("DOMContentLoaded", checkForPreloader);


/***/ }),

/***/ "./src/js/compTs/resize-toolbar.js":
/*!*****************************************!*\
  !*** ./src/js/compTs/resize-toolbar.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./screen-control-arrows.js */ "./src/js/compTs/screen-control-arrows.js");

function resizeToolbar(item) {
    window.scrollTo(0, item.offsetTop);
}
window.addEventListener("resize", () => resizeToolbar((0,_screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_0__.returnCurrectBlock)(".wrapper")));


/***/ }),

/***/ "./src/js/compTs/screen-control-arrows.js":
/*!************************************************!*\
  !*** ./src/js/compTs/screen-control-arrows.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBlockPageObj": () => (/* binding */ createBlockPageObj),
/* harmony export */   "returnCurrectBlock": () => (/* binding */ returnCurrectBlock),
/* harmony export */   "returnCurrectBlockPosition": () => (/* binding */ returnCurrectBlockPosition)
/* harmony export */ });
/* harmony import */ var _screen_scroll_animation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./screen-scroll-animation.js */ "./src/js/compTs/screen-scroll-animation.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

function screenControlArrows(blocksPageObj) {
    return __awaiter(this, void 0, void 0, function* () {
        const screenControlsBlock = document.querySelector(".scontrols");
        const screenControlButtonsBlock = screenControlsBlock.querySelector(".scontrols__scroll-buttons");
        const buttonsList = screenControlButtonsBlock.querySelectorAll(".scroll-button");
        let currectPosition = returnCurrectBlockPosition(blocksPageObj);
        hideInactiveButton();
        buttonsList.forEach((item) => item.addEventListener("click", checkDirectionButton));
        function checkDirectionButton(e) {
            e.preventDefault;
            const button = e.currentTarget;
            buttonsList.forEach((item) => {
                item.removeEventListener("click", checkDirectionButton);
                item.disabled = true;
            });
            for (const key in buttonDirectionAndClick) {
                if (button.classList.contains(key)) {
                    clickButton(key);
                    break;
                }
            }
        }
        function clickButton(direction) {
            return __awaiter(this, void 0, void 0, function* () {
                let currectBlock = blocksPageObj.blocksArr[currectPosition[0]][currectPosition[1]];
                currectBlock.classList.remove("_anim_active");
                let scrollAnimResult = yield (0,_screen_scroll_animation_js__WEBPACK_IMPORTED_MODULE_0__.scrollAnim)();
                const scrollAnimStartDirectionsObj = yield scrollAnimResult.start();
                const scrollAnimStartResult = yield scrollAnimStartDirectionsObj[direction]();
                const currectBlockTransitionEnd = yield returnTransitionEnd(currectBlock);
                if (scrollAnimStartResult && currectBlockTransitionEnd) {
                    clickButtonTransitionEnd();
                }
                function clickButtonTransitionEnd() {
                    return __awaiter(this, void 0, void 0, function* () {
                        buttonDirectionAndClick[direction]();
                        let newCurrectBlock = blocksPageObj.blocksArr[currectPosition[0]][currectPosition[1]];
                        window.scrollTo(0, newCurrectBlock.offsetTop);
                        hideInactiveButton();
                        const scrollAnimEndDirectionsObj = yield scrollAnimResult.end();
                        const scrollAnimEndResult = yield scrollAnimEndDirectionsObj[direction]();
                        const newCurrectBlockTransitionEnd = yield returnTransitionEnd(newCurrectBlock);
                        if (scrollAnimEndResult && newCurrectBlockTransitionEnd) {
                            buttonsList.forEach((item) => {
                                item.addEventListener("click", checkDirectionButton);
                                item.disabled = false;
                            });
                        }
                    });
                }
                function returnTransitionEnd(elem) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            elem.addEventListener("transitionend", transitionEndHandler);
                            function transitionEndHandler(e) {
                                if (e.target === elem) {
                                    elem.removeEventListener("transitionend", transitionEndHandler);
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        const clickTopButton = () => { currectPosition[0]--; };
        const clickRightButton = () => { currectPosition[1]++; };
        const clickBottomButton = () => { currectPosition[0]++; };
        const clickLeftButton = () => { currectPosition[1]--; };
        const buttonDirectionAndClick = {
            top: clickTopButton,
            right: clickRightButton,
            bottom: clickBottomButton,
            left: clickLeftButton
        };
        function hideInactiveButton() {
            const movementOptionsObj = createMovementOptionsObj();
            const movementOptionsArr = Object.entries(movementOptionsObj);
            const inactiveMovementArr = movementOptionsArr.filter((item) => !item[1]);
            const inactiveButtonArr = Array.from(buttonsList).filter((button) => {
                return inactiveMovementArr.some((item) => button.classList.contains(item[0]));
            });
            buttonsList.forEach((button) => {
                if (inactiveButtonArr.some((inactiveButton) => button === inactiveButton)) {
                    button.classList.add("button_inactive");
                }
                else {
                    button.classList.remove("button_inactive");
                }
            });
        }
        function createMovementOptionsObj() {
            const columnOfPageBlocksNum = Math.max.apply(null, blocksPageObj.positionArr.map((item) => item.length));
            const rowsOfPageBlocksNum = blocksPageObj.positionArr.length;
            return {
                top: currectPosition[0] - 1 >= 0 &&
                    blocksPageObj.positionArr[currectPosition[0] - 1][currectPosition[1]] !== undefined &&
                    blocksPageObj.positionArr[currectPosition[0] - 1][currectPosition[1]] > 0
                    ? true : false,
                right: currectPosition[1] + 1 < columnOfPageBlocksNum &&
                    blocksPageObj.positionArr[currectPosition[0]][currectPosition[1] + 1] !== undefined &&
                    blocksPageObj.positionArr[currectPosition[0]][currectPosition[1] + 1] > 0
                    ? true : false,
                bottom: currectPosition[0] + 1 < rowsOfPageBlocksNum &&
                    blocksPageObj.positionArr[currectPosition[0] + 1][currectPosition[1]] !== undefined &&
                    blocksPageObj.positionArr[currectPosition[0] + 1][currectPosition[1]] > 0
                    ? true : false,
                left: currectPosition[1] - 1 >= 0 &&
                    blocksPageObj.positionArr[currectPosition[0]][currectPosition[1] - 1] !== undefined &&
                    blocksPageObj.positionArr[currectPosition[0]][currectPosition[1] - 1] > 0
                    ? true : false,
            };
        }
    });
}
screenControlArrows(createBlockPageObj());
function createBlockPageObj() {
    const blocksPagePositionsArr = [
        [1, 2],
        [3, 4, -1],
    ];
    const blocksPageArr = fillingPagePositionArr(blocksPagePositionsArr);
    const startIndex = createStartIndex(blocksPagePositionsArr);
    return {
        blocksArr: blocksPageArr,
        positionArr: blocksPagePositionsArr,
        startBlockIndex: startIndex
    };
    function fillingPagePositionArr(blocksPagePositionsArr) {
        const wrapper = document.querySelector("[data-wrapper]");
        const blocksPage = wrapper.children;
        return blocksPagePositionsArr.map((item) => {
            return item.map((num) => {
                if (num === -1) {
                    return blocksPage[blocksPage.length - 1];
                }
                return blocksPage[num - 1];
            });
        });
    }
    function createStartIndex(matrix) {
        const indexRow = matrix.findIndex((item) => item.indexOf(1) !== -1);
        const indexCol = matrix[indexRow].indexOf(1);
        return [indexRow, indexCol];
    }
}
function returnCurrectBlockPosition(blocksPageObj) {
    const elem = returnCurrectBlock(".wrapper");
    const indexRow = blocksPageObj.blocksArr.findIndex((item) => item.indexOf(elem) !== -1);
    const indexCol = blocksPageObj.blocksArr[indexRow].indexOf(elem);
    return [indexRow, indexCol];
}
function returnCurrectBlock(parent) {
    const elems = document.elementsFromPoint(window.innerWidth / 2, window.innerHeight / 2).filter((item) => item.closest(parent));
    return elems[elems.length - 2];
}



/***/ }),

/***/ "./src/js/compTs/screen-scroll-animation.js":
/*!**************************************************!*\
  !*** ./src/js/compTs/screen-scroll-animation.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scrollAnim": () => (/* binding */ scrollAnim)
/* harmony export */ });
/* harmony import */ var _global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global-variables-and-types.js */ "./src/js/compTs/global-variables-and-types.js");
/* harmony import */ var _screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./screen-control-arrows.js */ "./src/js/compTs/screen-control-arrows.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function scrollAnim() {
    return __awaiter(this, void 0, void 0, function* () {
        const blocksPageObj = (0,_screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_1__.createBlockPageObj)();
        let currectBlockPosition;
        let currectBlock;
        return {
            start: startScrollAnim,
            end: endScrollAnim
        };
        function startScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                currectBlockPosition = (0,_screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_1__.returnCurrectBlockPosition)(blocksPageObj);
                currectBlock = blocksPageObj.blocksArr[currectBlockPosition[0]][currectBlockPosition[1]];
                return {
                    top: startTopScrollAnim,
                    right: startRightScrollAnim,
                    bottom: startBottomScrollAnim,
                    left: startLeftScrollAnim
                };
            });
        }
        function endScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                currectBlockPosition = (0,_screen_control_arrows_js__WEBPACK_IMPORTED_MODULE_1__.returnCurrectBlockPosition)(blocksPageObj);
                currectBlock = blocksPageObj.blocksArr[currectBlockPosition[0]][currectBlockPosition[1]];
                return {
                    top: endTopScrollAnim,
                    right: endRightScrollAnim,
                    bottom: endBottomScrollAnim,
                    left: endLeftScrollAnim
                };
            });
        }
        function startTopScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const nextBlock = blocksPageObj.blocksArr[currectBlockPosition[0] - 1][currectBlockPosition[1]];
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(0, ${25 * easedTime}%)`;
                                    nextBlock.style.transform = `translate(0, -${25 * easedTime}%)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(0, 25%)";
                                    nextBlock.style.transform = "translate(0, -25%)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        function startRightScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const nextBlock = blocksPageObj.blocksArr[currectBlockPosition[0]][currectBlockPosition[1] + 1];
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(-${25 * easedTime}%, 0)`;
                                    nextBlock.style.transform = `translate(${25 * easedTime}%, 0)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(-25%, 0)";
                                    nextBlock.style.transform = "translate(25%, 0)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        function startBottomScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const nextBlock = blocksPageObj.blocksArr[currectBlockPosition[0] + 1][currectBlockPosition[1]];
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(0, -${25 * easedTime}%)`;
                                    nextBlock.style.transform = `translate(0, ${25 * easedTime}%)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(0, -25%)";
                                    nextBlock.style.transform = "translate(0, 25%)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        function startLeftScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const nextBlock = blocksPageObj.blocksArr[currectBlockPosition[0]][currectBlockPosition[1] - 1];
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(${25 * easedTime}%, 0)`;
                                    nextBlock.style.transform = `translate(-${25 * easedTime}%, 0)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(25%, 0)";
                                    nextBlock.style.transform = "translate(-25%, 0)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        function endTopScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const prevBlock = blocksPageObj.blocksArr[currectBlockPosition[0] + 1][currectBlockPosition[1]];
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(0, -${25 * easedTime}%)`;
                                    prevBlock.style.transform = `translate(0, ${25 * easedTime}%)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(0, 0)";
                                    prevBlock.style.transform = "translate(0, 0)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        function endRightScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const prevBlock = blocksPageObj.blocksArr[currectBlockPosition[0]][currectBlockPosition[1] - 1];
                console.log(currectBlockPosition);
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(${25 * easedTime}%, 0)`;
                                    prevBlock.style.transform = `translate(-${25 * easedTime}%, 0)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(0, 0)";
                                    prevBlock.style.transform = "translate(0, 0)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        function endBottomScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const prevBlock = blocksPageObj.blocksArr[currectBlockPosition[0] - 1][currectBlockPosition[1]];
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(0, ${25 * easedTime}%)`;
                                    prevBlock.style.transform = `translate(0, -${25 * easedTime}%)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(0, 0)";
                                    prevBlock.style.transform = "translate(0, 0)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
        function endLeftScrollAnim() {
            return __awaiter(this, void 0, void 0, function* () {
                const prevBlock = blocksPageObj.blocksArr[currectBlockPosition[0]][currectBlockPosition[1] + 1];
                let result = yield anim(performance.now());
                return result;
                function anim(startTime) {
                    return __awaiter(this, void 0, void 0, function* () {
                        return new Promise((resolve) => {
                            step();
                            function step() {
                                const currentTime = performance.now();
                                const elapsedTime = (currentTime - startTime) / 1000;
                                const duration = 0.5;
                                const easedTime = (0,_global_variables_and_types_js__WEBPACK_IMPORTED_MODULE_0__.easeInOut)(elapsedTime / duration);
                                if (easedTime < duration) {
                                    currectBlock.style.transform = `translate(-${25 * easedTime}%, 0)`;
                                    prevBlock.style.transform = `translate(${25 * easedTime}%, 0)`;
                                    requestAnimationFrame(step);
                                }
                                else {
                                    currectBlock.style.transform = "translate(0, 0)";
                                    prevBlock.style.transform = "translate(0, 0)";
                                    resolve(true);
                                }
                            }
                        });
                    });
                }
            });
        }
    });
}



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _compTs_appTs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compTs/appTs.js */ "./src/js/compTs/appTs.js");

})();

/******/ })()
;