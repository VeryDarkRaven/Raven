(()=>{"use strict";var __webpack_modules__={147:()=>{eval('\n;// CONCATENATED MODULE: ./src/js/compTs/screen-control-arrows.js\nfunction screenControlArrows(blocksPageObj) {\n    const screenControlsBlock = document.querySelector(".scontrols");\n    const screenControlButtonsBlock = screenControlsBlock.querySelector(".scontrols__scroll-buttons");\n    const buttonsList = screenControlButtonsBlock.querySelectorAll(".scroll-button");\n    let currectPosition = blocksPageObj.startBlockIndex;\n    hideInactiveButton();\n    buttonsList.forEach((item) => {\n        if (item.classList.contains("top")) {\n            item.addEventListener("click", (e) => {\n                e.preventDefault;\n                clickTopButton();\n                hideInactiveButton();\n            });\n        }\n        else if (item.classList.contains("right")) {\n            item.addEventListener("click", (e) => {\n                e.preventDefault;\n                clickRightButton();\n                hideInactiveButton();\n            });\n        }\n        else if (item.classList.contains("bottom")) {\n            item.addEventListener("click", (e) => {\n                e.preventDefault;\n                clickBottomButton();\n                hideInactiveButton();\n            });\n        }\n        else if (item.classList.contains("left")) {\n            item.addEventListener("click", (e) => {\n                e.preventDefault;\n                clickLeftButton();\n                hideInactiveButton();\n            });\n        }\n    });\n    function clickTopButton() {\n        const movementOptionsObj = createMovementOptionsObj();\n        if (movementOptionsObj.top) {\n            currectPosition[0]--;\n            blocksPageObj.blocksArr[currectPosition[0]][currectPosition[1]].scrollIntoView({\n                behavior: "smooth",\n            });\n        }\n    }\n    function clickRightButton() {\n        const movementOptionsObj = createMovementOptionsObj();\n        if (movementOptionsObj.right) {\n            currectPosition[1]++;\n            blocksPageObj.blocksArr[currectPosition[0]][currectPosition[1]].scrollIntoView({\n                behavior: "smooth",\n            });\n        }\n    }\n    function clickBottomButton() {\n        const movementOptionsObj = createMovementOptionsObj();\n        if (movementOptionsObj.bottom) {\n            currectPosition[0]++;\n            blocksPageObj.blocksArr[currectPosition[0]][currectPosition[1]].scrollIntoView({\n                behavior: "smooth",\n            });\n        }\n    }\n    function clickLeftButton() {\n        const movementOptionsObj = createMovementOptionsObj();\n        if (movementOptionsObj.left) {\n            currectPosition[1]--;\n            blocksPageObj.blocksArr[currectPosition[0]][currectPosition[1]].scrollIntoView({\n                behavior: "smooth",\n            });\n        }\n    }\n    function hideInactiveButton() {\n        const movementOptionsObj = createMovementOptionsObj();\n        const movementOptionsArr = Object.entries(movementOptionsObj);\n        const inactiveMovementArr = movementOptionsArr.filter((item) => !item[1]);\n        const inactiveButtonArr = Array.from(buttonsList).filter((button) => {\n            return inactiveMovementArr.some((item) => button.classList.contains(item[0]));\n        });\n        buttonsList.forEach((button) => {\n            if (inactiveButtonArr.some((inactiveButton) => button === inactiveButton)) {\n                button.classList.add("button_inactive");\n            }\n            else {\n                button.classList.remove("button_inactive");\n            }\n        });\n    }\n    function createMovementOptionsObj() {\n        const columnOfPageBlocksNum = Math.max.apply(null, blocksPageObj.positionArr.map((item) => item.length));\n        const rowsOfPageBlocksNum = blocksPageObj.positionArr.length;\n        return {\n            top: currectPosition[0] - 1 >= 0 ? true : false,\n            right: currectPosition[1] + 1 < columnOfPageBlocksNum ? true : false,\n            bottom: currectPosition[0] + 1 < rowsOfPageBlocksNum ? true : false,\n            left: currectPosition[1] - 1 >= 0 ? true : false,\n        };\n    }\n}\nscreenControlArrows(createBlockPageObj());\nfunction createBlockPageObj() {\n    const blocksPagePositionsArr = [\n        [1, 2],\n        [3, 4],\n    ];\n    const blocksPageArr = fillingPagePositionArr(blocksPagePositionsArr);\n    const startIndex = createStartIndex(blocksPagePositionsArr);\n    return {\n        blocksArr: blocksPageArr,\n        positionArr: blocksPagePositionsArr,\n        startBlockIndex: startIndex\n    };\n    function fillingPagePositionArr(blocksPagePositionsArr) {\n        const wrapper = document.querySelector("[data-wrapper]");\n        const blocksPage = wrapper.children;\n        return blocksPagePositionsArr.map((item, index) => {\n            return item.map((num) => {\n                return blocksPage[num - 1];\n            });\n        });\n    }\n    function createStartIndex(matrix) {\n        const indexRow = matrix.findIndex((item) => item.indexOf(1) !== -1);\n        const indexCol = matrix[indexRow].indexOf(1);\n        return [indexRow, indexCol];\n    }\n}\n// function hideInactiveButton() {\n//   const movementOptionsObj: TypeMovementOption = createMovementOptionsObj();\n//   const movementOptionsArr: [string, boolean][] = Object.entries(movementOptionsObj);\n//   const inactiveMovementArr: [string, boolean][] = movementOptionsArr.filter((item: [string, boolean]) => item[1] === false);\n// const inactiveButtonArr = Array.from(buttonsList).filter((button: HTMLButtonElement) => {\n//   const buttonClasses = button.classList;\n// return inactiveMovementArr.some(([direction, isActive]) => {\n//   return buttonClasses.contains(direction) && !isActive;\n// });\n// });\n//   console.log(inactiveButtonArr);\n// }\n\n;// CONCATENATED MODULE: ./src/js/compTs/appTs.js\n\n\n;// CONCATENATED MODULE: ./src/js/app.js\n\n\n//# sourceURL=webpack://gulp-project/./src/js/app.js_+_2_modules?')}},__webpack_exports__={};__webpack_modules__[147]()})();